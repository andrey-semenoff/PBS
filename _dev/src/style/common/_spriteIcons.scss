// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$arrow-grey-name: 'arrow_grey';
$arrow-grey-x: 0px;
$arrow-grey-y: 51px;
$arrow-grey-offset-x: 0px;
$arrow-grey-offset-y: -51px;
$arrow-grey-width: 29px;
$arrow-grey-height: 53px;
$arrow-grey-total-width: 103px;
$arrow-grey-total-height: 104px;
$arrow-grey-image: '../img/spriteIcons.png';
$arrow-grey: (0px, 51px, 0px, -51px, 29px, 53px, 103px, 104px, '../img/spriteIcons.png', 'arrow_grey', );
$arrow-white-name: 'arrow_white';
$arrow-white-x: 34px;
$arrow-white-y: 51px;
$arrow-white-offset-x: -34px;
$arrow-white-offset-y: -51px;
$arrow-white-width: 29px;
$arrow-white-height: 53px;
$arrow-white-total-width: 103px;
$arrow-white-total-height: 104px;
$arrow-white-image: '../img/spriteIcons.png';
$arrow-white: (34px, 51px, -34px, -51px, 29px, 53px, 103px, 104px, '../img/spriteIcons.png', 'arrow_white', );
$delivery-name: 'delivery';
$delivery-x: 0px;
$delivery-y: 0px;
$delivery-offset-x: 0px;
$delivery-offset-y: 0px;
$delivery-width: 74px;
$delivery-height: 46px;
$delivery-total-width: 103px;
$delivery-total-height: 104px;
$delivery-image: '../img/spriteIcons.png';
$delivery: (0px, 0px, 0px, 0px, 74px, 46px, 103px, 104px, '../img/spriteIcons.png', 'delivery', );
$search-name: 'search';
$search-x: 79px;
$search-y: 0px;
$search-offset-x: -79px;
$search-offset-y: 0px;
$search-width: 24px;
$search-height: 24px;
$search-total-width: 103px;
$search-total-height: 104px;
$search-image: '../img/spriteIcons.png';
$search: (79px, 0px, -79px, 0px, 24px, 24px, 103px, 104px, '../img/spriteIcons.png', 'search', );
$icons-width: 103px;
$icons-height: 104px;
$icons-image: '../img/spriteIcons.png';
$icons-sprites: ($arrow-grey, $arrow-white, $delivery, $search, );
$icons: (103px, 104px, '../img/spriteIcons.png', $icons-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
